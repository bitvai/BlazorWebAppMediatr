@page "/weather"
@using MediatR
@using BlazorWebAppMediatr.Services
@attribute [StreamRendering]
@implements IDisposable
@inject IMediator MediatR

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherData[]? forecasts;
    CancellationTokenSource _cts;
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitialize");
        _cts = new CancellationTokenSource();
        // Simulate asynchronous loading to demonstrate streaming rendering
        //Request-response
        var response = await MediatR.Send(new WeatherRequest());
        forecasts = response.Forecasts.Select(weather => new WeatherData()
        {
            Date = weather.Date.ToString(),
            TemperatureC = weather.TemperatureC,
            Summary = weather.Summary
        }).ToArray();

        //Basically event handling
        await Task.Run(async () =>
        {
            try
            {
                var stream = MediatR.CreateStream(new WeatherStreamQuery(), _cts.Token);
                await foreach (var fc in stream)
                {
                    forecasts = fc.Forecasts.Select(weather => new WeatherData()
                    {
                        Date = weather.Date.ToString(),
                        TemperatureC = weather.TemperatureC,
                        Summary = weather.Summary
                    }).ToArray();
                    
                    await InvokeAsync(StateHasChanged);
                }
                Console.WriteLine("Foreach end");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        });
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose");
        _cts.Cancel();
    }

    private class WeatherData
    {
        public string? Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    }
}
